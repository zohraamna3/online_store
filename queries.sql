--QUERY 1--
--Get all products in a specific category sorted by price:

SELECT p.ProductID, p.Name, p.Description, p.Price, c.Name AS Category
FROM Products p
JOIN Categories c ON p.CategoryID = c.CategoryID
WHERE c.Name = 'Electronics'
ORDER BY p.Price;

--QUERY 2--
--Find the total number of products in each category:

SELECT c.Name AS Category, COUNT(*) AS TotalProducts
FROM Products p
JOIN Categories c ON p.CategoryID = c.CategoryID
GROUP BY c.Name;

--QUERY 3--
--Retrieve all orders along with the user's email who placed the order:

SELECT o.OrderID, o.OrderDate, u.Email AS UserEmail, o.Status
FROM Orders o
JOIN Users u ON o.UserID = u.UserID;

--QUERY 4--
--Calculate the total revenue generated by the e-commerce platform:

SELECT SUM(p.Amount) AS TotalRevenue
FROM Payments p;

--QUERY 5--
--Get the average rating for each product along with its name:

SELECT p.Name, AVG(r.Rating) AS AvgRating
FROM Products p
LEFT JOIN Reviews r ON p.ProductID = r.ProductID
GROUP BY p.Name;

--QUERY 6--
--Find the top 5 users who spent the most on the platform:

SELECT TOP 5 u.UserID, u.Username, SUM(p.Amount) AS TotalSpent
FROM Users u
JOIN Orders o ON u.UserID = o.UserID
JOIN Payments p ON o.OrderID = p.OrderID
GROUP BY u.UserID, u.Username
ORDER BY TotalSpent DESC;

--QUERY 7--
--List all users who haven't placed any orders yet:

SELECT UserID, Username
FROM Users
WHERE UserID NOT IN (SELECT DISTINCT UserID FROM Orders);

--QUERY 8--
--Find the most expensive product and its category:

SELECT TOP 1 p.Name, p.Price, c.Name AS Category
FROM Products p
JOIN Categories c ON p.CategoryID = c.CategoryID
ORDER BY p.Price DESC;

--QUERY 9--
--Get the total number of items in the user's cart:

SELECT UserID, SUM(Quantity) AS TotalItemsInCart
FROM Cart
GROUP BY UserID;

--QUERY 10--
--Retrieve the orders placed by a specific user along with their total amount:

SELECT o.OrderID, SUM(p.Amount) AS TotalAmount
FROM Orders o
JOIN Payments p ON o.OrderID = p.OrderID
WHERE o.UserID = 1
GROUP BY o.OrderID;

--QUERY 11--
--Get the total number of orders placed by each user:

SELECT u.Username, COUNT(o.OrderID) AS TotalOrders
FROM Users u
LEFT JOIN Orders o ON u.UserID = o.UserID
GROUP BY u.Username;

--QUERY 12--
-- Retrieve the top 10 best-selling products based on the quantity sold:

SELECT TOP 10 p.Name, SUM(od.Quantity) AS TotalQuantitySold
FROM Products p
JOIN OrderDetails od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.Name
ORDER BY TotalQuantitySold DESC;

--QUERY 13--
--Find the total revenue generated in the last month:
SELECT SUM(p.Amount) AS RevenueLastMonth
FROM Payments p
WHERE MONTH(PaymentDate) = MONTH(GETDATE()) - 1
AND YEAR(PaymentDate) = YEAR(GETDATE());

--QUERY 14--
-- Get the average order value for each month of the year:

SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, AVG(p.Amount) AS AvgOrderValue
FROM Orders o
JOIN Payments p ON o.OrderID = p.OrderID
GROUP BY YEAR(OrderDate), MONTH(OrderDate);

--QUERY 15--
--List all products with a stock quantity below a certain threshold (e.g., 10):

SELECT p.Name, p.InventoryQuantity
FROM Products p
WHERE p.InventoryQuantity < 10;

--QUERY 16--
--Retrieve the total number of active users who placed an order in the last month:
SELECT COUNT(DISTINCT o.UserID) AS ActiveUsersLastMonth
FROM Orders o
WHERE MONTH(OrderDate) = MONTH(GETDATE()) - 1
AND YEAR(OrderDate) = YEAR(GETDATE());

--QUERY 17--
-- Find the users who placed orders with a total amount greater than a certain threshold (e.g., $500):
SELECT u.Username, SUM(p.Amount) AS TotalAmountSpent
FROM Users u
JOIN Orders o ON u.UserID = o.UserID
JOIN Payments p ON o.OrderID = p.OrderID
GROUP BY u.UserID, u.Username
HAVING SUM(p.Amount) > 500;

--QUERY 18--
--Retrieve the products with the highest and lowest average ratings:
SELECT Name, AvgRating
FROM (
    SELECT p.Name, AVG(r.Rating) AS AvgRating,
           ROW_NUMBER() OVER (ORDER BY AVG(r.Rating) DESC) AS HighestRank,
           ROW_NUMBER() OVER (ORDER BY AVG(r.Rating) ASC) AS LowestRank
    FROM Products p
    LEFT JOIN Reviews r ON p.ProductID = r.ProductID
    GROUP BY p.Name
) AS RankedProducts
WHERE HighestRank = 1 OR LowestRank = 1;

--QUERY 19--
--Find the users who made their first purchase in the last month:

SELECT u.UserID, u.Username, MIN(o.OrderDate) AS FirstPurchaseDate
FROM Users u
JOIN Orders o ON u.UserID = o.UserID
WHERE MONTH(o.OrderDate) = MONTH(GETDATE()) - 1
AND YEAR(o.OrderDate) = YEAR(GETDATE())
GROUP BY u.UserID,u.Username;

--QUERY 20--
-- Retrieve the total revenue generated from orders with coupon discounts applied:
SELECT SUM(p.Amount) AS RevenueWithCoupons
FROM Payments p
JOIN Orders o ON p.OrderID = o.OrderID
JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products pr ON od.ProductID = pr.ProductID
WHERE pr.Name IN (
    SELECT Name
    FROM Products
    WHERE ProductID IN (
        SELECT ProductID
        FROM Coupons
    )
);

--QUERY 21--
--List all products ordered by a specific user in the last week:
SELECT p.Name, od.Quantity, od.Price
FROM Products p
JOIN OrderDetails od ON p.ProductID = od.ProductID
JOIN Orders o ON od.OrderID = o.OrderID
WHERE o.UserID = 1
AND o.OrderDate >= DATEADD(WEEK, -1, GETDATE());

--QUERY 22--
--Retrieve the total number of orders placed during a specific month:
SELECT COUNT(OrderID) AS TotalOrders
FROM Orders
WHERE MONTH(OrderDate) = 4
AND YEAR(OrderDate) = 2024;

--QUERY 23--
--Find the users who haven't logged in for the past 3 months:
SELECT UserID, Username
FROM Users
WHERE UserID NOT IN (
    SELECT DISTINCT UserID
    FROM Orders
    WHERE OrderDate >= DATEADD(MONTH, -3, GETDATE())
);

--QUERY 24--
--Retrieve the top 5 categories with the highest revenue generated:
SELECT TOP 5 c.Name AS Category, SUM(p.Amount) AS TotalRevenue
FROM Categories c
JOIN Products pr ON c.CategoryID = pr.CategoryID
JOIN OrderDetails od ON pr.ProductID = od.ProductID
JOIN Orders o ON od.OrderID = o.OrderID
JOIN Payments p ON o.OrderID = p.OrderID
GROUP BY c.Name
ORDER BY TotalRevenue DESC;

--QUERY 25--
--List all products that haven't received any reviews yet:
SELECT ProductID, Name
FROM Products
WHERE ProductID NOT IN (
    SELECT DISTINCT ProductID
    FROM Reviews
);

--QUERY 26--
--Find the users who spent more than the average amount on each order:
SELECT u.Username, p.Amount
FROM Users u
JOIN Orders o ON u.UserID = o.UserID
JOIN Payments p ON o.OrderID = p.OrderID
WHERE p.Amount > (
    SELECT AVG(Amount)
    FROM Payments
);

--QUERY 27--
--Retrieve the top 10 users with the highest total spending amount:
SELECT TOP 10 u.Username, SUM(p.Amount) AS TotalSpent
FROM Users u
JOIN Orders o ON u.UserID = o.UserID
JOIN Payments p ON o.OrderID = p.OrderID
GROUP BY u.Username
ORDER BY TotalSpent DESC;

--QUERY 28--
--List all users who have items in their cart but haven't checked out yet:
SELECT DISTINCT u.UserID, u.Username
FROM Users u
JOIN Cart c ON u.UserID = c.UserID
WHERE u.UserID NOT IN (
    SELECT DISTINCT UserID
    FROM Orders
);

--QUERY 29--
--Retrieve the average rating for each category based on product reviews:*
SELECT c.Name AS Category, AVG(r.Rating) AS AvgRating
FROM Categories c
JOIN Products pr ON c.CategoryID = pr.CategoryID
LEFT JOIN Reviews r ON pr.ProductID = r.ProductID
GROUP BY c.Name;





